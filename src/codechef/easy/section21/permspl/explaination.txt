Define \DeltaΔ to be the difference between the inversions of the two sequences (first - second). We’ll try to make \Delta = 0Δ=0 instead of making the two inversion counts the same, which is equivalent. Let’s start off with all elements in the first sequence, and we’ll move some of those numbers to the second sequence. Initially, \DeltaΔ is the number of inversions in the initial sequence, which we can count naively using the definition of an inversion.

Consider some pair i, ji,j that forms an inversion, that is, i < ji<j and a_i > a_ja
i
​
 >a
j
​
 . What happens when we move ii from the first sequence to the second? There are two cases:

jj is still in the first sequence: in this case, moving ii removes the inversion pair i, ji,j from the first sequence, so \DeltaΔ decreases by 11.
jj is in the second sequence: in this case, moving ii creates the inversion pair i, ji,j in the second sequence, so \DeltaΔ still decreases by 11.
So, no matter what we do with jj, if we move ii to the other sequence, \DeltaΔ decreases by 11 for each pair it’s in. The casework ends up being the same for jj, so this holds true for all elements.

For notation, let c_ic
i
​
  be the number of inversion pairs that index ii is “involved in” - it’s either the first or second index in the pair. You can think of this as its degree in a graph where every inversion creates an edge. Independent of other elements (as demonstrated above), if we move element ii to the second sequence, \DeltaΔ decreases by c_ic
i
​
 . Since we want \DeltaΔ to be 00, you can model it as choosing some subset of the values c_ic
i
​
  that sums to \DeltaΔ. This is exactly knapsack 8, and the remainder of the problem can be solved with that.