Note that for subtask 11 the solution is simple brute force.

For Subtask 22, we can build an lca like data structure precomputing 2^i2
i
  ancestors of each node, and the maximum/minimum values in the path from each node to this ancestor. Then we can decompose each query (u, v)(u,v) into uu to lca(u, v)lca(u,v) and vv to lca(u, v)lca(u,v) and compute the answer.

It is clear that type FF queries can be easily handled.

For Type CC queries, let us first look at a brute force solution.

First of all compress all the values stored at the nodes to a range of [1,N][1,N].

For each query of the form u,vu,v do a dfs from node uu and maintain a boolean array AA such that A[i] = 1A[i]=1, if there exists a node having value ii on the path from uu to current node. On reaching the node vv during dfs, the boolean array would represent what all values are present on the path from uu to vv. Now we can just iterate over the boolean array and for every consecutive i, ji,j such that A[i]A[i] and A[j]A[j] are both 11, we can keep min of (j - i)(j−i).

We can fasten up the above solution by maintaining the boolean array AA using segment tree. We could use the operations set/unset an element using point update of 1/01/0 and range max of difference of consecutive set elements. This can easily be done by maintaining the leftmost and rightmost set element in the range of each node.

Now, let’s try to imagine that the queries are on subarrays and not tree-paths. Let us first do a dfs ordering of the given tree (rooted at any arbitrary node) such that each node comes twice in the array, once while entering the dfs and other while exiting the dfs. Now, a path from u to v can be represented as consecutive elements in this array. More on this here 38.

Hence, if we can implement a function to add a value to a range and a function to remove a value from a range, along with maintaining the answer of the current range, we can easily use MO’s algorithm to solve the problem. To implement the add and remove functions, we could use the segment tree idea described above in the brute force approach. Hence we could use a segment tree along with MO’s algorithm to solve the problem.

Final Complexity: O(Q\sqrt{N}\log{N})O(Q
N
​
 logN)

Note : The constraints were such that some brute force solutions passed during the contest, although we had done some testing to ensure that it doesn’t. We had no option but to make the TL very strict, at 3.53.5 seconds, in order to cut out the brute force solutions. Note that solutions using sets might not pass, as sets and multisets have a large constant factor. We deeply regret any inconvenience caused.

